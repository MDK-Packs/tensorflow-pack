name: AVH build and execution test
on:
  workflow_dispatch:
  #pull_request:
  #  branches: [main]
  #push:
  #  branches: [main]
  #schedule:
  #  - cron: '00 20 * * 6'

jobs:
  AVH:
    strategy:

      matrix:
        target: [
          {proj: kws,               board: AVH-SSE-300-U55,  model: FVP_Corstone_SSE-300_Ethos-U55,  base: mps3, uart: uart0},
          {proj: kws,               board: AVH-SSE-300-U65,  model: FVP_Corstone_SSE-300_Ethos-U65,  base: mps3, uart: uart0},
          {proj: kws,               board: AVH-SSE-310,      model: FVP_Corstone_SSE-310,            base: mps3, uart: uart0},
          {proj: kws,               board: AVH-SSE-310-U55,  model: FVP_Corstone_SSE-310,            base: mps3, uart: uart0},
          {proj: kws,               board: AVH-SSE-310-U65,  model: FVP_Corstone_SSE-310_Ethos-U65,  base: mps3, uart: uart0},
          {proj: kws,               board: AVH-SSE-315,      model: FVP_Corstone_SSE-315,            base: mps4, uart: uart0},
          {proj: kws,               board: AVH-SSE-315-U65,  model: FVP_Corstone_SSE-315,            base: mps4, uart: uart0},
          {proj: kws,               board: AVH-SSE-320,      model: FVP_Corstone_SSE-320,            base: mps4, uart: uart0},
          {proj: kws,               board: AVH-SSE-320-U85,  model: FVP_Corstone_SSE-320,            base: mps4, uart: uart0},
          {proj: object-detection,  board: AVH-SSE-300-U55,  model: FVP_Corstone_SSE-300_Ethos-U55,  base: mps3, uart: uart0},
          {proj: object-detection,  board: AVH-SSE-300-U65,  model: FVP_Corstone_SSE-300_Ethos-U65,  base: mps3, uart: uart0},
          {proj: object-detection,  board: AVH-SSE-310,      model: FVP_Corstone_SSE-310,            base: mps3, uart: uart0},
          {proj: object-detection,  board: AVH-SSE-310-U55,  model: FVP_Corstone_SSE-310,            base: mps3, uart: uart0},
          {proj: object-detection,  board: AVH-SSE-310-U65,  model: FVP_Corstone_SSE-310_Ethos-U65,  base: mps3, uart: uart0},
          {proj: object-detection,  board: AVH-SSE-315,      model: FVP_Corstone_SSE-315,            base: mps4, uart: uart0},
          {proj: object-detection,  board: AVH-SSE-315-U65,  model: FVP_Corstone_SSE-315,            base: mps4, uart: uart0},
          {proj: object-detection,  board: AVH-SSE-320,      model: FVP_Corstone_SSE-320,            base: mps4, uart: uart0},
          {proj: object-detection,  board: AVH-SSE-320-U85,  model: FVP_Corstone_SSE-320,            base: mps4, uart: uart0}
        ]

      fail-fast: false

    runs-on: ubuntu-22.04

    steps:
    - name: Checkout repo
      uses: actions/checkout@v4
      with:
        repository: Arm-Examples/mlek-cmsis-pack-examples

    - name: Restore Latest Pack Build from Cache
      uses: actions/cache/restore@v4
      with:
         path: ${{ github.workspace }}/out
         key: latest-tensorflow-pack-build
         
    - name: Install tools
      uses: ARM-software/cmsis-actions/vcpkg@v1
      with: 
        config: ".ci/vcpkg-configuration.json"

    - name: Activate Arm tool license
      uses: ARM-software/cmsis-actions/armlm@v1

    - name: Unpack and Install Packs
      run: 
        cd ${{ github.workspace }}/out && cpackget add -a *.pack 

    - name: Diagnosis show directory structure
      run:
        tree -d

    - name: Diagnosis where *.yml files are locacted
      run:
        tree --prune -P '*.yml'

    - name: Show content of mlek.csolution.yml before patch
      run: |
        cat mlek.csolution.yml

    - name: Patch the csolution to use the latest CMSIS-NN, Arm ethos-u-core-driver, and tensorflow packs
      run: |
        sed -i 's/\(tensorflow::[^@]*\)@[^ ]*/\1/g' mlek.csolution.yml
        sed -i 's/\(Arm::ethos-u-core-driver[^@]*\)@[^ ]*/\1/g' mlek.csolution.yml
        sed -i 's/\(ARM::CMSIS-NN[^@]*\)@[^ ]*/\1/g' mlek.csolution.yml

    - name: Show content of mlek.csolution.yml after patch
      run: |
        cat mlek.csolution.yml

    - name: Build project ${{ matrix.target.proj }} for target ${{ matrix.target.board }} with AC6
      run: |
         cbuild mlek.csolution.yml --update-rte --packs --context ${{ matrix.target.proj }}+${{ matrix.target.board }}

    - name: Execute project ${{ matrix.target.proj }}, target ${{ matrix.target.board }}, build Release on AVH ${{ matrix.target.model }}
      if: always()
      run: |
          ${{ matrix.target.model }} \
          -a ./out/${{ matrix.target.proj }}/${{ matrix.target.board }}/Release/${{ matrix.target.proj }}.axf \
          -f ./device/corstone/fvp-configs/${{ matrix.target.base }}_fvp_config.txt \
          -C ${{ matrix.target.base }}_board.${{ matrix.target.uart }}.out_file=./out/${{ matrix.target.proj }}/${{ matrix.target.board }}/Release/fvp_stdout.log \
          --simlimit 60 --stat
          cat ./out/${{ matrix.target.proj }}/${{ matrix.target.board }}/Release/fvp_stdout.log
          
    - name: Execute project ${{ matrix.target.proj }}, target ${{ matrix.target.board }}, build Debug on AVH ${{ matrix.target.model }}
      if: always()
      run: |
          ${{ matrix.target.model }} \
          -a ./out/${{ matrix.target.proj }}/${{ matrix.target.board }}/Debug/${{ matrix.target.proj }}.axf \
          -f ./device/corstone/fvp-configs/${{ matrix.target.base }}_fvp_config.txt \
          -C ${{ matrix.target.base }}_board.${{ matrix.target.uart }}.out_file=./out/${{ matrix.target.proj }}/${{ matrix.target.board }}/Debug/fvp_stdout.log \
          --simlimit 60 --stat
          cat ./out/${{ matrix.target.proj }}/${{ matrix.target.board }}/Debug/fvp_stdout.log
